name: Build TimeChanger APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
          
      - name: Create local.properties
        run: echo "sdk.dir=$ANDROID_HOME" > local.properties
      
      - name: Create Gradle Wrapper
        run: |
          mkdir -p gradle/wrapper
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-6.9-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          
      - name: List project structure
        run: find . -type f -name "*.gradle" | xargs ls -la
          
      - name: Create Gradle Wrapper Script
        run: |
          echo "#!/usr/bin/env sh" > gradlew
          echo "exec gradle \"\$@\"" >> gradlew
          chmod +x gradlew
        
      - name: Build with Gradle (debug mode)
        run: gradle assembleDebug --info --stacktrace
      
      - name: Show build results
        run: |
          echo "## Build Completed"
          echo "APK build result:"
          find . -name "*.apk"
          
      - name: Create GitHub Release
        id: create_release
        run: |
          # 获取当前时间戳作为发布版本
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RELEASE_NAME="TimeChanger-${TIMESTAMP}"
          
          # 创建发布标签
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag -a "${RELEASE_NAME}" -m "Release ${RELEASE_NAME}"
          git push origin "${RELEASE_NAME}"
          
          # 创建GitHub发布
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "'"${RELEASE_NAME}"'",
              "name": "'"${RELEASE_NAME}"'",
              "body": "Automated build from GitHub Actions",
              "draft": false,
              "prerelease": false
            }')
            
          # 获取发布ID
          RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r '.id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          echo "Release created with ID: ${RELEASE_ID}"
        
      - name: Upload APK to Release
        if: env.RELEASE_ID != ''
        run: |
          # 找到APK文件
          APK_PATH=$(find . -name "*.apk" | head -n 1)
          
          if [ -z "$APK_PATH" ]; then
            echo "No APK file found!"
            exit 1
          fi
          
          echo "Found APK at: $APK_PATH"
          
          # 上传APK文件到GitHub发布
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$APK_PATH" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=TimeChanger-${{ env.RELEASE_NAME }}.apk"
          
          echo "APK uploaded successfully to release: https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_NAME }}" 